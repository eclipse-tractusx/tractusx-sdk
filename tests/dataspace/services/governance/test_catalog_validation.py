#################################################################################
# Eclipse Tractus-X - Software Development KIT
#
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# Part of this content was generated by GitHub CoPilot (Claude Sonnet 4) and reviewed by a human committer

import pytest
from sqlmodel import SQLModel, create_engine, Session

from tractusx_sdk.dataspace.services.governance.policy_checker_service import (
    PolicyCheckerService, CatalogValidationResult, AssetValidationResult
)
from tractusx_sdk.dataspace.models.governance.policy_db_models import PolicyUsageRole


class TestCatalogValidation:
    """Test catalog validation functionality"""
    
    @pytest.fixture
    def engine(self):
        """Create an in-memory SQLite engine for testing"""
        engine = create_engine("sqlite:///:memory:")
        SQLModel.metadata.create_all(engine)
        return engine
    
    @pytest.fixture
    def session(self, engine):
        """Create a database session for testing"""
        with Session(engine) as session:
            yield session
    
    @pytest.fixture
    def approved_policies(self):
        """Sample approved policies to upload"""
        return [
            {
                "odrl:permission": {
                    "odrl:action": {
                        "@id": "odrl:use"
                    },
                    "odrl:constraint": {
                        "odrl:and": [
                            {
                                "odrl:leftOperand": {
                                    "@id": "cx-policy:FrameworkAgreement"
                                },
                                "odrl:operator": {
                                    "@id": "odrl:eq"
                                },
                                "odrl:rightOperand": "DataExchangeGovernance:1.0"
                            },
                            {
                                "odrl:leftOperand": {
                                    "@id": "cx-policy:Membership"
                                },
                                "odrl:operator": {
                                    "@id": "odrl:eq"
                                },
                                "odrl:rightOperand": "active"
                            },
                            {
                                "odrl:leftOperand": {
                                    "@id": "cx-policy:UsagePurpose"
                                },
                                "odrl:operator": {
                                    "@id": "odrl:eq"
                                },
                                "odrl:rightOperand": "cx.core.digitalTwinRegistry:1"
                            }
                        ]
                    }
                },
                "odrl:prohibition": [],
                "odrl:obligation": []
            },
            {
                "odrl:permission": {
                    "odrl:action": {
                        "@id": "odrl:use"
                    },
                    "odrl:constraint": {
                        "odrl:and": [
                            {
                                "odrl:leftOperand": {
                                    "@id": "cx-policy:FrameworkAgreement"
                                },
                                "odrl:operator": {
                                    "@id": "odrl:eq"
                                },
                                "odrl:rightOperand": "DataExchangeGovernance:1.0"
                            },
                            {
                                "odrl:leftOperand": {
                                    "@id": "cx-policy:Membership"
                                },
                                "odrl:operator": {
                                    "@id": "odrl:eq"
                                },
                                "odrl:rightOperand": "active"
                            },
                            {
                                "odrl:leftOperand": {
                                    "@id": "cx-policy:UsagePurpose"
                                },
                                "odrl:operator": {
                                    "@id": "odrl:eq"
                                },
                                "odrl:rightOperand": "cx.core.industrycore:1"
                            }
                        ]
                    }
                },
                "odrl:prohibition": [],
                "odrl:obligation": []
            }
        ]
    
    @pytest.fixture
    def sample_catalog(self):
        """Sample catalog response with valid and invalid assets"""
        return {
            "@id": "4f1bcfb2-7959-4ab7-a091-781a8c76b153",
            "@type": "dcat:Catalog",
            "dcat:dataset": [
                {
                    "@id": "ichub:asset:dtr:9foUM7pmSTrr5LZnx0NqiQ",
                    "@type": "dcat:Dataset",
                    "odrl:hasPolicy": {
                        "@id": "policy-1",
                        "@type": "odrl:Offer",
                        "odrl:permission": {
                            "odrl:action": {
                                "@id": "odrl:use"
                            },
                            "odrl:constraint": {
                                "odrl:and": [
                                    {
                                        "odrl:leftOperand": {
                                            "@id": "cx-policy:FrameworkAgreement"
                                        },
                                        "odrl:operator": {
                                            "@id": "odrl:eq"
                                        },
                                        "odrl:rightOperand": "DataExchangeGovernance:1.0"
                                    },
                                    {
                                        "odrl:leftOperand": {
                                            "@id": "cx-policy:Membership"
                                        },
                                        "odrl:operator": {
                                            "@id": "odrl:eq"
                                        },
                                        "odrl:rightOperand": "active"
                                    },
                                    {
                                        "odrl:leftOperand": {
                                            "@id": "cx-policy:UsagePurpose"
                                        },
                                        "odrl:operator": {
                                            "@id": "odrl:eq"
                                        },
                                        "odrl:rightOperand": "cx.core.digitalTwinRegistry:1"
                                    }
                                ]
                            }
                        },
                        "odrl:prohibition": [],
                        "odrl:obligation": []
                    }
                },
                {
                    "@id": "ichub:asset:invalid:xyz",
                    "@type": "dcat:Dataset",
                    "odrl:hasPolicy": {
                        "@id": "policy-2",
                        "@type": "odrl:Offer",
                        "odrl:permission": {
                            "odrl:action": {
                                "@id": "odrl:use"
                            },
                            "odrl:constraint": {
                                "odrl:and": [
                                    {
                                        "odrl:leftOperand": {
                                            "@id": "cx-policy:FrameworkAgreement"
                                        },
                                        "odrl:operator": {
                                            "@id": "odrl:eq"
                                        },
                                        "odrl:rightOperand": "SomeOtherAgreement:1.0"
                                    }
                                ]
                            }
                        },
                        "odrl:prohibition": [],
                        "odrl:obligation": []
                    }
                }
            ]
        }
    
    def test_upload_policies_to_database(self, session, approved_policies):
        """Test uploading policies to database"""
        checker = PolicyCheckerService(session)
        
        uploaded_hashes = checker.upload_policies_to_database(
            approved_policies,
            role=PolicyUsageRole.CONSUMER,
            counter_party_id="BPNL0000000093Q7"
        )
        
        assert len(uploaded_hashes) == 2
        assert all(hash_val for hash_val in uploaded_hashes)
        
        # Check that hashes are in cache
        for hash_val in uploaded_hashes:
            assert hash_val in checker._policy_hash_cache
    
    def test_validate_catalog_with_valid_asset(self, session, approved_policies, sample_catalog):
        """Test catalog validation with a valid asset"""
        checker = PolicyCheckerService(session)
        
        # Upload approved policies first
        checker.upload_policies_to_database(
            approved_policies,
            role=PolicyUsageRole.CONSUMER,
            counter_party_id="BPNL0000000093Q7"
        )
        
        # Validate catalog
        result = checker.validate_catalog(
            sample_catalog,
            role=PolicyUsageRole.CONSUMER,
            counter_party_id="BPNL0000000093Q7"
        )
        
        assert isinstance(result, CatalogValidationResult)
        assert len(result.asset_results) == 2
        
        # First asset should be valid (matches digitalTwinRegistry policy)
        valid_asset = next((r for r in result.asset_results if r.asset_id == "ichub:asset:dtr:9foUM7pmSTrr5LZnx0NqiQ"), None)
        assert valid_asset is not None
        assert valid_asset.is_valid is True
        assert "Policy matches approved policy" in valid_asset.reason
        
        # Second asset should be invalid (different policy)
        invalid_asset = next((r for r in result.asset_results if r.asset_id == "ichub:asset:invalid:xyz"), None)
        assert invalid_asset is not None
        assert invalid_asset.is_valid is False
        assert "not found in approved policies" in invalid_asset.reason
    
    def test_get_safe_assets(self, session, approved_policies, sample_catalog):
        """Test getting safe assets from validation result"""
        checker = PolicyCheckerService(session)
        
        # Upload approved policies first
        checker.upload_policies_to_database(
            approved_policies,
            role=PolicyUsageRole.CONSUMER,
            counter_party_id="BPNL0000000093Q7"
        )
        
        # Validate catalog
        result = checker.validate_catalog(
            sample_catalog,
            role=PolicyUsageRole.CONSUMER,
            counter_party_id="BPNL0000000093Q7"
        )
        
        safe_assets = result.get_safe_assets()
        
        assert len(safe_assets) == 1
        asset_id, policy_hash = safe_assets[0]
        assert asset_id == "ichub:asset:dtr:9foUM7pmSTrr5LZnx0NqiQ"
        assert policy_hash in checker._policy_hash_cache
    
    def test_catalog_with_single_dataset(self, session, approved_policies):
        """Test catalog validation with single dataset (not array)"""
        checker = PolicyCheckerService(session)
        
        # Upload approved policies first
        checker.upload_policies_to_database(
            approved_policies,
            role=PolicyUsageRole.CONSUMER
        )
        
        # Single dataset catalog
        single_catalog = {
            "@id": "catalog-1",
            "@type": "dcat:Catalog",
            "dcat:dataset": {
                "@id": "single:asset:1",
                "@type": "dcat:Dataset",
                "odrl:hasPolicy": {
                    "@id": "policy-1",
                    "@type": "odrl:Offer",
                    "odrl:permission": {
                        "odrl:action": {
                            "@id": "odrl:use"
                        },
                        "odrl:constraint": {
                            "odrl:and": [
                                {
                                    "odrl:leftOperand": {
                                        "@id": "cx-policy:FrameworkAgreement"
                                    },
                                    "odrl:operator": {
                                        "@id": "odrl:eq"
                                    },
                                    "odrl:rightOperand": "DataExchangeGovernance:1.0"
                                },
                                {
                                    "odrl:leftOperand": {
                                        "@id": "cx-policy:Membership"
                                    },
                                    "odrl:operator": {
                                        "@id": "odrl:eq"
                                    },
                                    "odrl:rightOperand": "active"
                                },
                                {
                                    "odrl:leftOperand": {
                                        "@id": "cx-policy:UsagePurpose"
                                    },
                                    "odrl:operator": {
                                        "@id": "odrl:eq"
                                    },
                                    "odrl:rightOperand": "cx.core.industrycore:1"
                                }
                            ]
                        }
                    },
                    "odrl:prohibition": [],
                    "odrl:obligation": []
                }
            }
        }
        
        result = checker.validate_catalog(single_catalog)
        
        assert len(result.asset_results) == 1
        assert result.asset_results[0].asset_id == "single:asset:1"
        assert result.asset_results[0].is_valid is True
    
    def test_catalog_with_no_datasets(self, session, approved_policies):
        """Test catalog validation with no datasets"""
        checker = PolicyCheckerService(session)
        
        empty_catalog = {
            "@id": "empty-catalog",
            "@type": "dcat:Catalog"
        }
        
        result = checker.validate_catalog(empty_catalog)
        
        assert len(result.asset_results) == 0
        assert len(result.valid_assets) == 0
        assert len(result.invalid_assets) == 0
    
    def test_dataset_without_policy(self, session, approved_policies):
        """Test dataset without policy"""
        checker = PolicyCheckerService(session)
        
        catalog_no_policy = {
            "@id": "catalog-no-policy",
            "@type": "dcat:Catalog",
            "dcat:dataset": {
                "@id": "asset:no:policy",
                "@type": "dcat:Dataset"
                # No odrl:hasPolicy
            }
        }
        
        result = checker.validate_catalog(catalog_no_policy)
        
        assert len(result.asset_results) == 1
        assert result.asset_results[0].is_valid is False
        assert "No policy found" in result.asset_results[0].reason
    
    def test_policy_normalization(self, session):
        """Test policy normalization removes metadata"""
        checker = PolicyCheckerService(session)
        
        policy_with_metadata = {
            "@id": "policy-123",
            "@type": "odrl:Offer",
            "metadata": "should be removed",
            "odrl:permission": {
                "odrl:action": {
                    "@id": "odrl:use"
                }
            },
            "odrl:prohibition": [],
            "odrl:obligation": []
        }
        
        normalized = checker._normalize_policy_for_comparison(policy_with_metadata)
        
        assert "@id" not in normalized
        assert "@type" not in normalized
        assert "metadata" not in normalized
        assert "odrl:permission" in normalized
        assert "odrl:prohibition" in normalized
        assert "odrl:obligation" in normalized
    
    def test_extract_policy_from_dataset(self, session):
        """Test policy extraction from various dataset structures"""
        checker = PolicyCheckerService(session)
        
        # Test with odrl:hasPolicy
        dataset1 = {
            "odrl:hasPolicy": {"@type": "odrl:Offer", "test": "policy1"}
        }
        policy1 = checker._extract_policy_from_dataset(dataset1)
        assert policy1 == {"@type": "odrl:Offer", "test": "policy1"}
        
        # Test with no policy
        dataset2 = {"@id": "asset-2"}
        policy2 = checker._extract_policy_from_dataset(dataset2)
        assert policy2 is None
        
        # Test with policy field
        dataset3 = {
            "policy": {"@type": "odrl:Offer", "test": "policy3"}
        }
        policy3 = checker._extract_policy_from_dataset(dataset3)
        assert policy3 == {"@type": "odrl:Offer", "test": "policy3"}
