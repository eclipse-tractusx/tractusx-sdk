#################################################################################
# Eclipse Tractus-X - Software Development KIT
#
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# Part of this content was generated by GitHub CoPilot (Claude Sonnet 4) and reviewed by a human committer

import sys
import os
import pytest
from unittest.mock import Mock, MagicMock
from sqlmodel import Session

# Add src to path to import from tractusx_sdk

from tractusx_sdk.dataspace.services.governance.policy_checker_service import PolicyCheckerService, PolicyValidationResult
from tractusx_sdk.dataspace.models.governance.policy_db_models import (
    Policy, PolicyUsage, FilterExpression, PolicyUsageRole
)


class TestPolicyCheckerService:
    """Test cases for PolicyCheckerService"""
    
    @pytest.fixture
    def mock_session(self):
        """Create a mock database session"""
        session = Mock(spec=Session)
        # Mock the exec method to return empty results by default
        session.exec.return_value.all.return_value = []
        session.exec.return_value.first.return_value = None
        return session
    
    @pytest.fixture
    def sample_policy_json(self):
        """Sample policy JSON for testing"""
        return {
            "odrl:permission": {
                "odrl:action": {
                    "@id": "odrl:use"
                },
                "odrl:constraint": {
                    "odrl:and": [
                        {
                            "odrl:leftOperand": {
                                "@id": "cx-policy:FrameworkAgreement"
                            },
                            "odrl:operator": {
                                "@id": "odrl:eq"
                            },
                            "odrl:rightOperand": "DataExchangeGovernance:1.0"
                        },
                        {
                            "odrl:leftOperand": {
                                "@id": "cx-policy:Membership"
                            },
                            "odrl:operator": {
                                "@id": "odrl:eq"
                            },
                            "odrl:rightOperand": "active"
                        },
                        {
                            "odrl:leftOperand": {
                                "@id": "cx-policy:UsagePurpose"
                            },
                            "odrl:operator": {
                                "@id": "odrl:eq"
                            },
                            "odrl:rightOperand": "cx.core.industrycore:1"
                        }
                    ]
                }
            },
            "odrl:prohibition": [],
            "odrl:obligation": []
        }
    
    @pytest.fixture
    def sample_filter_expressions(self):
        """Sample filter expressions for testing"""
        return [
            {
                "operandLeft": "https://w3id.org/edc/v0.0.1/ns/id",
                "operator": "=",
                "operandRight": "ichub:asset:1qgpKiRoLcs_PC6oOYsHHQ"
            }
        ]
    
    def test_policy_checker_initialization(self, mock_session):
        """Test PolicyCheckerService initialization"""
        checker = PolicyCheckerService(mock_session)
        assert checker.db_session == mock_session
        assert isinstance(checker._policy_hash_cache, set)
        assert isinstance(checker._filter_hash_cache, set)
    
    def test_generate_policy_hash(self, mock_session, sample_policy_json):
        """Test policy hash generation"""
        checker = PolicyCheckerService(mock_session)
        policy_hash = checker._generate_policy_hash(sample_policy_json)
        
        assert isinstance(policy_hash, str)
        assert len(policy_hash) == 64  # SHA256 hash length
    
    def test_generate_filter_hash(self, mock_session, sample_filter_expressions):
        """Test filter expression hash generation"""
        checker = PolicyCheckerService(mock_session)
        filter_hash = checker._generate_filter_hash(sample_filter_expressions[0])
        
        assert isinstance(filter_hash, str)
        assert len(filter_hash) == 64  # SHA256 hash length
    
    def test_validate_policy_not_found(self, mock_session, sample_policy_json, sample_filter_expressions):
        """Test validation when policy is not found in database"""
        checker = PolicyCheckerService(mock_session)
        
        result = checker.validate_policy(sample_policy_json, sample_filter_expressions)
        
        assert isinstance(result, PolicyValidationResult)
        assert not result.is_valid
        assert "not found in approved policies" in result.reason
    
    def test_validate_policy_success(self, mock_session, sample_policy_json, sample_filter_expressions):
        """Test successful policy validation"""
        checker = PolicyCheckerService(mock_session)
        
        # Generate expected hashes
        policy_hash = checker._generate_policy_hash(sample_policy_json)
        filter_hash = checker._generate_filter_hash(sample_filter_expressions[0])
        
        # Add hashes to cache to simulate approved policies
        checker._policy_hash_cache.add(policy_hash)
        checker._filter_hash_cache.add(filter_hash)
        
        # Mock policy and policy usage
        mock_policy = Mock(spec=Policy)
        mock_policy.id = 1
        mock_policy.hash = policy_hash
        
        mock_filter_expr = Mock(spec=FilterExpression)
        mock_filter_expr.hash = filter_hash
        
        mock_policy_usage = Mock(spec=PolicyUsage)
        mock_policy_usage.policy = mock_policy
        mock_policy_usage.filter_expressions = [mock_filter_expr]
        
        # Configure mock session to return our test data
        mock_session.exec.return_value.first.return_value = mock_policy
        mock_session.exec.return_value.all.return_value = [mock_policy_usage]
        
        result = checker.validate_policy(sample_policy_json, sample_filter_expressions)
        
        assert isinstance(result, PolicyValidationResult)
        assert result.is_valid
        assert "successful" in result.reason
        assert policy_hash in result.matched_policies
    
    def test_constraint_hash_generation_and_logic(self, mock_session):
        """Test constraint hash generation for AND logic"""
        checker = PolicyCheckerService(mock_session)
        
        constraint_data = {
            "odrl:and": [
                {
                    "odrl:leftOperand": {"@id": "test:left1"},
                    "odrl:operator": {"@id": "odrl:eq"},
                    "odrl:rightOperand": "value1"
                },
                {
                    "odrl:leftOperand": {"@id": "test:left2"},
                    "odrl:operator": {"@id": "odrl:eq"},
                    "odrl:rightOperand": "value2"
                }
            ]
        }
        
        constraint_hash = checker._generate_constraint_hash(constraint_data)
        assert isinstance(constraint_hash, str)
        assert len(constraint_hash) == 64
    
    def test_add_approved_policy(self, mock_session, sample_policy_json, sample_filter_expressions):
        """Test adding an approved policy"""
        checker = PolicyCheckerService(mock_session)
        
        policy_hash = checker.add_approved_policy(
            sample_policy_json, 
            sample_filter_expressions,
            PolicyUsageRole.CONSUMER
        )
        
        assert isinstance(policy_hash, str)
        assert len(policy_hash) == 64
        assert policy_hash in checker._policy_hash_cache
    
    def test_refresh_cache(self, mock_session):
        """Test cache refresh functionality"""
        checker = PolicyCheckerService(mock_session)
        
        # Add some test data to cache
        checker._policy_hash_cache.add("test_hash")
        checker._filter_hash_cache.add("test_filter_hash")
        
        # Refresh cache
        checker.refresh_cache()
        
        # Cache should be refreshed (empty in this case due to mock)
        assert len(checker._policy_hash_cache) == 0
        assert len(checker._filter_hash_cache) == 0


if __name__ == "__main__":
    pytest.main([__file__])
