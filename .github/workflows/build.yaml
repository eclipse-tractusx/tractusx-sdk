###############################################################
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
###############################################################

name: Build and SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  POETRY_HOME: /opt/poetry
  POETRY_VERSION: 2.0.0

jobs:
  sonarqube:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # We don't need to create a python virtual environment because Poetry already handles it for us
      # Poetry is installed in a separate virtual environment because it is highly recommended
      # https://python-poetry.org/docs/#ci-recommendations
      - name: Create a venv for Poetry and install Poetry
        run: |
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry==$POETRY_VERSION
          $POETRY_HOME/bin/poetry --version


      # Poetry sync is preferred over install because it makes sure to be in sync with the poetry.lock file
      # We use --no-root to avoid installing the current package in the virtual environment
      # If the poetry.lock file is not present, we use install as a fallback
      - name: Install dependencies
        run: |
          if [ -f poetry.lock ]; then
            $POETRY_HOME/bin/poetry sync --no-root
          else
            $POETRY_HOME/bin/poetry install --no-root
          fi

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=tractusx_sdk --cov-report=xml

      - name: Check if coverage report is generated
        run: |
          if [ ! -f coverage.xml ]; then
            echo "Coverage report not found!"
            exit 1
          else
            echo "Coverage report generated successfully."
          fi