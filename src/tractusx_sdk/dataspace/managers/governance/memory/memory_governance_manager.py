#################################################################################
# Eclipse Tractus-X - Software Development KIT
#
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# Part of this content was generated by GitHub CoPilot (Claude Sonnet 4) and reviewed by a human committer

from typing import Dict, List, Any, Tuple
from ..base_governance_manager import BaseGovernanceManager


class MemoryGovernanceManager(BaseGovernanceManager):
    """
    In-memory implementation of governance manager.
    Stores policies in a dictionary with hash as key and policy JSON as value.
    """

    def __init__(self, **kwargs):
        """
        Initialize the in-memory governance manager.
        
        Args:
            **kwargs: Additional configuration (for future use)
        """
        self.policies: Dict[str, Dict[str, Any]] = {}

    def add_policy(self, json_policy: Dict[str, Any]) -> str:
        """
        Add a policy to the in-memory store.
        
        Args:
            json_policy: The policy in JSON format
            
        Returns:
            str: The hash of the normalized policy
        """
        normalized_policy = self.normalize_policy(json_policy)
        policy_hash = self.generate_policy_hash(normalized_policy)
        self.policies[policy_hash] = normalized_policy
        return policy_hash

    def remove_policy(self, policy_hash: str) -> bool:
        """
        Remove a policy from the in-memory store.
        
        Args:
            policy_hash: The hash of the policy to remove
            
        Returns:
            bool: True if policy was removed, False if not found
        """
        if policy_hash in self.policies:
            del self.policies[policy_hash]
            return True
        return False

    def is_policy_valid(self, json_policy: Dict[str, Any]) -> bool:
        """
        Check if a policy is valid (exists in the in-memory store).
        
        Args:
            json_policy: The policy in JSON format to validate
            
        Returns:
            bool: True if policy is valid, False otherwise
        """
        normalized_policy = self.normalize_policy(json_policy)
        policy_hash = self.generate_policy_hash(normalized_policy)
        return policy_hash in self.policies

    def select_valid_policies(self, policies: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Filter a list of policies and return only the valid ones.
        
        Args:
            policies: List of policies in JSON format
            
        Returns:
            List[Dict[str, Any]]: List of valid policies
        """
        valid_policies = []
        for policy in policies:
            if self.is_policy_valid(policy):
                valid_policies.append(policy)
        return valid_policies

    def select_valid_assets_and_policies(self, dcat_dataset: Dict[str, Any]) -> List[Tuple[str, str]]:
        """
        Extract and validate assets and their policies from a DCAT dataset.
        
        Args:
            dcat_dataset: The DCAT dataset containing assets and policies
            
        Returns:
            List[Tuple[str, str]]: List of tuples (asset_id, policy_hash) for valid combinations
        """
        valid_combinations = []
        
        # Handle both single dataset and array of datasets
        datasets = dcat_dataset.get("dcat:dataset", [])
        if isinstance(datasets, dict):
            datasets = [datasets]
        elif not isinstance(datasets, list):
            datasets = []
        
        for dataset in datasets:
            asset_id = self.extract_asset_id(dataset)
            
            # Extract policy from dataset
            policy_json = self.extract_policy_from_dataset(dataset)
            if not policy_json:
                continue
            
            # Check if policy is valid
            if self.is_policy_valid(policy_json):
                normalized_policy = self.normalize_policy(policy_json)
                policy_hash = self.generate_policy_hash(normalized_policy)
                valid_combinations.append((asset_id, policy_hash))
        
        return valid_combinations

    def get_policy_count(self) -> int:
        """
        Get the total number of policies in the in-memory store.
        
        Returns:
            int: Number of policies
        """
        return len(self.policies)

    def list_policy_hashes(self) -> List[str]:
        """
        Get a list of all policy hashes in the in-memory store.
        
        Returns:
            List[str]: List of policy hashes
        """
        return list(self.policies.keys())

    def get_policy_by_hash(self, policy_hash: str) -> Dict[str, Any] | None:
        """
        Get a policy by its hash.
        
        Args:
            policy_hash: The hash of the policy
            
        Returns:
            Dict[str, Any] | None: The policy if found, None otherwise
        """
        return self.policies.get(policy_hash)

    def clear_policies(self):
        """Clear all policies from the in-memory store."""
        self.policies.clear()

    def load_policies_from_list(self, policies: List[Dict[str, Any]]) -> List[str]:
        """
        Load multiple policies from a list.
        
        Args:
            policies: List of policy JSONs
            
        Returns:
            List[str]: List of policy hashes that were added
        """
        added_hashes = []
        for policy in policies:
            policy_hash = self.add_policy(policy)
            added_hashes.append(policy_hash)
        return added_hashes
