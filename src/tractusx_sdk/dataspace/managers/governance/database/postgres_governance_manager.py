#################################################################################
# Eclipse Tractus-X - Software Development KIT
#
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# Part of this content was generated by GitHub CoPilot (Claude Sonnet 4) and reviewed by a human committer

from typing import Dict, List, Any, Tuple
from sqlmodel import Session, select
from ..base_governance_manager import BaseGovernanceManager
from ....models.governance.policy_db_models import Policy, PolicyUsageRole
from ....services.governance.policy_checker_service import PolicyCheckerService


class PostgresGovernanceManager(BaseGovernanceManager):
    """
    Database implementation of governance manager.
    Uses PostgreSQL/SQLite database to store and validate policies.
    """

    def __init__(self, db_session: Session, **kwargs):
        """
        Initialize the database governance manager.
        
        Args:
            db_session: SQLModel database session
            **kwargs: Additional configuration
        """
        self.db_session = db_session
        self.policy_checker = PolicyCheckerService(db_session)
        self.role = kwargs.get('role', PolicyUsageRole.CONSUMER)
        self.counter_party_id = kwargs.get('counter_party_id', None)

    def add_policy(self, json_policy: Dict[str, Any]) -> str:
        """
        Add a policy to the database.
        
        Args:
            json_policy: The policy in JSON format
            
        Returns:
            str: The hash of the normalized policy
        """
        try:
            policy_hash = self.policy_checker._create_full_policy_in_db(
                json_policy, self.role, self.counter_party_id
            )
            self.policy_checker._policy_hash_cache.add(policy_hash)
            return policy_hash
        except Exception as e:
            raise RuntimeError(f"Failed to add policy to database: {str(e)}")

    def remove_policy(self, policy_hash: str) -> bool:
        """
        Remove a policy from the database.
        
        Args:
            policy_hash: The hash of the policy to remove
            
        Returns:
            bool: True if policy was removed, False if not found
        """
        try:
            # Find the policy by hash
            policy = self.db_session.exec(
                select(Policy).where(Policy.hash == policy_hash)
            ).first()
            
            if not policy:
                return False
            
            # Delete the policy (this will cascade to related entities)
            self.db_session.delete(policy)
            self.db_session.commit()
            
            # Remove from cache
            self.policy_checker._policy_hash_cache.discard(policy_hash)
            
            return True
        except Exception:
            self.db_session.rollback()
            return False

    def is_policy_valid(self, json_policy: Dict[str, Any]) -> bool:
        """
        Check if a policy is valid (exists in the database).
        
        Args:
            json_policy: The policy in JSON format to validate
            
        Returns:
            bool: True if policy is valid, False otherwise
        """
        normalized_policy = self.normalize_policy(json_policy)
        policy_hash = self.policy_checker._generate_policy_hash(normalized_policy)
        return policy_hash in self.policy_checker._policy_hash_cache

    def select_valid_policies(self, policies: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Filter a list of policies and return only the valid ones.
        
        Args:
            policies: List of policies in JSON format
            
        Returns:
            List[Dict[str, Any]]: List of valid policies
        """
        valid_policies = []
        for policy in policies:
            if self.is_policy_valid(policy):
                valid_policies.append(policy)
        return valid_policies

    def select_valid_assets_and_policies(self, dcat_dataset: Dict[str, Any]) -> List[Tuple[str, str]]:
        """
        Extract and validate assets and their policies from a DCAT dataset.
        
        Args:
            dcat_dataset: The DCAT dataset containing assets and policies
            
        Returns:
            List[Tuple[str, str]]: List of tuples (asset_id, policy_hash) for valid combinations
        """
        validation_result = self.policy_checker.validate_catalog(
            dcat_dataset, self.role, self.counter_party_id
        )
        return validation_result.get_safe_assets()

    def get_policy_count(self) -> int:
        """
        Get the total number of policies in the database.
        
        Returns:
            int: Number of policies
        """
        return len(self.policy_checker._policy_hash_cache)

    def list_policy_hashes(self) -> List[str]:
        """
        Get a list of all policy hashes in the database.
        
        Returns:
            List[str]: List of policy hashes
        """
        return list(self.policy_checker._policy_hash_cache)

    def refresh_cache(self):
        """Refresh the policy cache from the database."""
        self.policy_checker.refresh_cache()

    def upload_policies_batch(self, policies: List[Dict[str, Any]]) -> List[str]:
        """
        Upload multiple policies to the database in a batch.
        
        Args:
            policies: List of policy JSONs
            
        Returns:
            List[str]: List of policy hashes that were created
        """
        return self.policy_checker.upload_policies_to_database(
            policies, self.role, self.counter_party_id
        )
