#################################################################################
# Eclipse Tractus-X - Software Development KIT
#
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# Part of this content was generated by GitHub CoPilot (Claude Sonnet 4) and reviewed by a human committer.

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Tuple, Optional
import hashlib
import json


class BaseGovernanceManager(ABC):
    """
    Abstract base class for governance managers that handle policy validation
    and management in different storage backends.
    """

    @abstractmethod
    def __init__(self, **kwargs):
        """Initialize the governance manager with specific configuration."""
        raise NotImplementedError

    @abstractmethod
    def add_policy(self, json_policy: Dict[str, Any]) -> str:
        """
        Add a policy to the governance store.
        
        Args:
            json_policy: The policy in JSON format
            
        Returns:
            str: The hash of the normalized policy
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    @abstractmethod
    def remove_policy(self, policy_hash: str) -> bool:
        """
        Remove a policy from the governance store.
        
        Args:
            policy_hash: The hash of the policy to remove
            
        Returns:
            bool: True if policy was removed, False if not found
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    @abstractmethod
    def is_policy_valid(self, json_policy: Dict[str, Any]) -> bool:
        """
        Check if a policy is valid (exists in the governance store).
        
        Args:
            json_policy: The policy in JSON format to validate
            
        Returns:
            bool: True if policy is valid, False otherwise
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    @abstractmethod
    def select_valid_policies(self, policies: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Filter a list of policies and return only the valid ones.
        
        Args:
            policies: List of policies in JSON format
            
        Returns:
            List[Dict[str, Any]]: List of valid policies
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    @abstractmethod
    def select_valid_assets_and_policies(self, dcat_dataset: Dict[str, Any]) -> List[Tuple[str, str]]:
        """
        Extract and validate assets and their policies from a DCAT dataset.
        
        Args:
            dcat_dataset: The DCAT dataset containing assets and policies
            
        Returns:
            List[Tuple[str, str]]: List of tuples (asset_id, policy_hash) for valid combinations
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    @abstractmethod
    def get_policy_count(self) -> int:
        """
        Get the total number of policies in the governance store.
        
        Returns:
            int: Number of policies
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    @abstractmethod
    def list_policy_hashes(self) -> List[str]:
        """
        Get a list of all policy hashes in the governance store.
        
        Returns:
            List[str]: List of policy hashes
        """
        raise NotImplementedError("This method should be implemented by subclasses.")

    def normalize_policy(self, json_policy: Dict[str, Any]) -> Dict[str, Any]:
        """
        Normalize a policy JSON to ensure consistent hash generation.
        Removes metadata fields that don't affect policy content.
        
        Args:
            json_policy: The policy in JSON format
            
        Returns:
            Dict[str, Any]: Normalized policy
        """
        normalized = {}
        
        # Copy core policy elements, excluding metadata
        core_fields = ["odrl:permission", "odrl:prohibition", "odrl:obligation"]
        for field in core_fields:
            if field in json_policy:
                normalized[field] = json_policy[field]
        
        # Ensure empty arrays for missing fields
        if "odrl:prohibition" not in normalized:
            normalized["odrl:prohibition"] = []
        if "odrl:obligation" not in normalized:
            normalized["odrl:obligation"] = []
        
        return normalized

    def generate_policy_hash(self, json_policy: Dict[str, Any]) -> str:
        """
        Generate a hash for a policy JSON structure.
        
        Args:
            json_policy: The policy in JSON format
            
        Returns:
            str: SHA-256 hash of the normalized policy
        """
        normalized = self.normalize_policy(json_policy)
        # Sort keys to ensure consistent hash generation
        policy_string = json.dumps(normalized, sort_keys=True, separators=(',', ':'))
        return hashlib.sha256(policy_string.encode()).hexdigest()

    def extract_policy_from_dataset(self, dataset: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Extract policy from dataset structure.
        
        Args:
            dataset: Dataset containing policy information
            
        Returns:
            Optional[Dict[str, Any]]: Policy if found, None otherwise
        """
        # Look for policy in hasPolicy
        has_policy = dataset.get("odrl:hasPolicy")
        if has_policy and isinstance(has_policy, dict):
            return has_policy
        
        # Alternative locations
        policy_locations = [
            "odrl:hasPolicy",
            "policy",
            "dcat:hasPolicy"
        ]
        
        for location in policy_locations:
            policy = dataset.get(location)
            if policy and isinstance(policy, dict):
                return policy
        
        return None

    def extract_asset_id(self, dataset: Dict[str, Any]) -> str:
        """
        Extract asset ID from dataset.
        
        Args:
            dataset: Dataset containing asset information
            
        Returns:
            str: Asset ID or "unknown" if not found
        """
        return dataset.get("@id", dataset.get("id", "unknown"))
